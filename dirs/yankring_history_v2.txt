NeoVimnge this setting from 0 to 1oasis/nerd-fonts in your terminal u will see funny characters here. those fonts).=================================e very sure of what you are doingm/autoload/plug.vim')ad/plug.vim')oadload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vimg.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vimath)rest of the config down below m or neovim specific. It's easy `if using_neovim` blocks.================================= are declaring the plugins we' './install --all' }ocmd VimEnter * UpdateRemotePlugins'} similar features, autocompletionthe system) of the file linesnt line)ive and can't be easily toggledways activate the relative Author refuses to add a settingpe status line. consoles as buffers)s own) also configure g:hound_base_url stance, so it can load them=================================ey map error messages"=================================lt in neovim, but not in vimr plugins!)or vim (nvim has nice ones bytory to place swap files inbackup files to put backup filesstent undos - undo after you re-open the file existonrm =~? 'mlterm\|xterm\|xterm-256\|screen-256')t suggestionpreview windowcted completion option)he window flickers like shelltions that match)om screen borderave of python filesnsh) and plugins running commandsver tool you use for debugging)port ipdb; ipdb.set_trace()<esc>=================================d 1 "" v:true"<CR>", "", "")akers#ft#python#python()akers#ft#python#flake8()on3 -m py_compile'on3 -m flake8'ext to the problematic linengr pre filled)<CR>r pre filled)<CR>r pre filled>')<CR>r pre filled')<CR>ead)e:<CR>--ry to guess your current vcsill speed up opening filesg=none ctermfg=119g=none ctermfg=167g=none ctermfg=227g=237  ctermfg=119g=237  ctermfg=167g=237  ctermfg=227ose pluginon window, ESC won't leave insert", "ESC": "\<ESC>"}vim/'n system has non-text things/' 0/custom.vim"vim" execute "source " . custom_configs_pathndif,V
 Fisa-vim-config, a config for both Vim and  http://vim.fisadev.com version: 12.0.1 To use fancy symbols wherever possible, cha and use a font from https://github.com/ryan (if you aren't using one of those fonts, yo Turst me, they look nice when using one of et fancy_symbols_enabled = 0et encoding=utf-8et using_neovim = has('nvim')et using_vim = !using_neovim =========================================== Vim-plug initialization Avoid modifying this section, unless you aret vim_plug_just_installed = 0f using_neovim   let vim_plug_path = expand('~/.config/nvilse   let vim_plug_path = expand('~/.vim/autolondiff !filereadable(vim_plug_path)   echo "Installing Vim-plug..."   echo ""   if using_neovim       silent !mkdir -p ~/.config/nvim/autol       silent !curl -fLo ~/.config/nvim/auto   else       silent !mkdir -p ~/.vim/autoload       silent !curl -fLo ~/.vim/autoload/plu   endif   let vim_plug_just_installed = 1ndif manually load vim-plug the first timef vim_plug_just_installed   :execute 'source '.fnameescape(vim_plug_pndif Obscure hacks done, you can now modify the  as you wish :) IMPORTANT: some things in the config are vi to spot, they are inside `if using_vim` or  =========================================== Active plugins You can disable or add new ones here: this needs to be here, so vim-plug knows we want to usef using_neovim   call plug#begin("~/.config/nvim/plugged")lse   call plug#begin("~/.vim/plugged")ndif Now the actual plugins: Override configs by directorylug 'arielrossanigo/dir-configs-override.vim Code commenterlug 'scrooloose/nerdcommenter' Better file browserlug 'scrooloose/nerdtree' Class/module browserlug 'majutsushi/tagbar' Search results counterlug 'vim-scripts/IndexedSearch' A couple of nice colorschemes Plug 'fisadev/fisa-vim-colorscheme'lug 'patstockwell/vim-monokai-tasty' Airlinelug 'vim-airline/vim-airline'lug 'vim-airline/vim-airline-themes' Code and files fuzzy finderlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do':lug 'junegunn/fzf.vim' Pending tasks listlug 'fisadev/FixedTaskList.vim' Async autocompletionf using_neovim && vim_plug_just_installed   Plug 'Shougo/deoplete.nvim', {'do': ':autlse   Plug 'Shougo/deoplete.nvim'ndiflug 'roxma/nvim-yarp' Python autocompletionlug 'deoplete-plugins/deoplete-jedi' Completion from other opened fileslug 'Shougo/context_filetype.vim' Just to add the python go-to-definition and from this plugin is disabledlug 'davidhalter/jedi-vim' Automatically close parenthesis, etclug 'Townk/vim-autoclose' Surroundlug 'tpope/vim-surround' Indent text objectlug 'michaeljsmith/vim-indent-object' Indentation based movementslug 'jeetsukumaran/vim-indentwise' Better language packslug 'sheerun/vim-polyglot' Ack code search (requires ack installed in lug 'mileszs/ack.vim' Paint css colors with the real colorlug 'lilydjwg/colorizer' Window chooserlug 't9md/vim-choosewin' Automatically sort python importslug 'fisadev/vim-isort' Highlight matching html tagslug 'valloric/MatchTagAlways' Generate html in a simple waylug 'mattn/emmet-vim' Git integrationlug 'tpope/vim-fugitive' Git/mercurial/others diff icons on the sidelug 'mhinz/vim-signify' Yank history navigationlug 'vim-scripts/YankRing.vim' Linterslug 'neomake/neomake' Relative numbering of lines (0 is the curre (disabled by default because is very intrus on/off. When the plugin is present, will al numbering every time you go to normal mode. to avoid that)lug 'myusuf3/numbers.vim' Nice icons in the file explorer and file tylug 'ryanoasis/vim-devicons'f using_vim   " Consoles as buffers (neovim has its own   Plug 'rosenfeld/conque-term'   " XML/HTML tags navigation (neovim has it   Plug 'vim-scripts/matchit.zip'ndif Code searcher. If you enable it, you should and g:hound_port, pointing to your hound in Plug 'mattn/webapi-vim' Plug 'jfo/hound.vim' Tell vim-plug we finished declaring pluginsall plug#end() =========================================== Install plugins the first time vim runsf vim_plug_just_installed   echo "Installing Bundles, please ignore k   :PlugInstallndif =========================================== Vim settings and mappings You can edit them as you wishf using_vim   " A bunch of things that are set by defau   " no vi-compatible   set nocompatible   " allow plugins by file type (required fo   filetype plugin on   filetype indent on   " always show status bar   set ls=2   " incremental search   set incsearch   " highlighted search results   set hlsearch   " syntax highlight on   syntax on   " better backup, swap and undos storage f   " default)   set directory=~/.vim/dirs/tmp     " direc   set backup                        " make    set backupdir=~/.vim/dirs/backups " where   set undofile                      " persi   set undodir=~/.vim/dirs/undos   set viminfo+=n~/.vim/dirs/viminfo   " create needed directories if they don't   if !isdirectory(&backupdir)       call mkdir(&backupdir, "p")   endif   if !isdirectory(&directory)       call mkdir(&directory, "p")   endif   if !isdirectory(&undodir)       call mkdir(&undodir, "p")   endifnd tabs and spaces handlinget expandtabet tabstop=4et softtabstop=4et shiftwidth=4 show line numberset nu remove ugly vertical lines on window divisiet fillchars+=vert:\  use 256 colors when possiblef has('gui_running') || using_neovim || (&te   if !has('gui_running')       let &t_Co = 256   endif   colorscheme vim-monokai-tastylse   colorscheme delekndif needed so deoplete can auto select the firset completeopt+=noinsert comment this line to enable autocompletion  (displays documentation related to the sele disabled by default because preview makes tet completeopt-=preview autocompletion of files and commands behave (complete only the common part, list the opet wildmode=list:longest save as sudoa w!! w !sudo tee "%" tab navigation mappingsap tt :tabnew ap <M-Right> :tabn<CR>map <M-Right> <ESC>:tabn<CR>ap <M-Left> :tabp<CR>map <M-Left> <ESC>:tabp<CR> when scrolling, keep cursor 3 lines away fret scrolloff=3 clear search resultsnoremap <silent> // :noh<CR> clear empty spaces at the end of lines on sutocmd BufWritePre *.py :%s/\s\+$//e fix problems with uncommon shells (fish, xo (neomake, ...)et shell=/bin/bash  Ability to add python breakpoints (I use ipdb, but you can change it to whateu FileType python map <silent> <leader>b Oim =========================================== Plugins settings and mappings Edit them as you wish. Tagbar ----------------------------- toggle tagbar displayap <F4> :TagbarToggle<CR> autofocus on tagbar openet g:tagbar_autofocus = 1 NERDTree ----------------------------- toggle nerdtree displayap <F3> :NERDTreeToggle<CR> open nerdtree with the current file selectemap ,t :NERDTreeFind<CR> don;t show these file typeset NERDTreeIgnore = ['\.pyc$', '\.pyo$'] Enable folder iconset g:WebDevIconsUnicodeDecorateFolderNodes =et g:DevIconsEnableFoldersOpenClose = 1 Fix directory colorsighlight! link NERDTreeFlags NERDTreeDir Remove expandable arrowet g:WebDevIconsNerdTreeBeforeGlyphPadding =et g:WebDevIconsUnicodeDecorateFolderNodes =et NERDTreeDirArrowExpandable = "\u00a0"et NERDTreeDirArrowCollapsible = "\u00a0"et NERDTreeNodeDelimiter = "\x07" Autorefresh on tree focusunction! NERDTreeRefresh()   if &filetype == "nerdtree"       silent exe substitute(mapcheck("R"),    endifndfunctionutocmd BufEnter * call NERDTreeRefresh() Tasklist ------------------------------ show pending tasks listap <F2> :TaskList<CR> Neomake ------------------------------ Run linter on writeutocmd! BufWritePost * Neomake Check code as python3 by defaultet g:neomake_python_python_maker = neomake#met g:neomake_python_flake8_maker = neomake#met g:neomake_python_python_maker.exe = 'pythet g:neomake_python_flake8_maker.exe = 'pyth Disable error messages inside the buffer, net g:neomake_virtualtext_current_error = 0 Fzf ------------------------------ file finder mappingmap ,e :Files<CR> tags (symbols) in current file finder mappimap ,g :BTag<CR> the same, but with the word under the cursomap ,wg :execute ":BTag " . expand('<cword>' tags (symbols) in all files finder mappingmap ,G :Tags<CR> the same, but with the word under the cursomap ,wG :execute ":Tags " . expand('<cword>' general code finder in current file mappingmap ,f :BLines<CR> the same, but with the word under the cursomap ,wf :execute ":BLines " . expand('<cword general code finder in all files mappingmap ,F :Lines<CR> the same, but with the word under the cursomap ,wF :execute ":Lines " . expand('<cword> commands finder mappingmap ,c :Commands<CR> Deoplete ----------------------------- Use deoplete.et g:deoplete#enable_at_startup = 1all deoplete#custom#option({   'ignore_case': v:true,   'smart_case': v:true,}) complete with words from any opened fileet g:context_filetype#same_filetypes = {}et g:context_filetype#same_filetypes._ = '_' Jedi-vim ------------------------------ Disable autocompletion (using deoplete instet g:jedi#completions_enabled = 0 All these mappings work only for python cod Go to definitionet g:jedi#goto_command = ',d' Find ocurrenceset g:jedi#usages_command = ',o' Find assignmentset g:jedi#goto_assignments_command = ',a' Go to definition in new tabmap ,D :tab split<CR>:call jedi#goto()<CR> Ack.vim ------------------------------ mappingsmap ,r :Ack map ,wr :execute ":Ack " . expand('<cword>') Window Chooser ---------------------------- mappingmap  -  <Plug>(choosewin) show big letterset g:choosewin_overlay_enable = 1 Signify ------------------------------ this first setting decides in which order t UPDATE it to reflect your preferences, it wet g:signify_vcs_list = ['git', 'hg'] mappings to jump to changed blocksmap <leader>sn <plug>(signify-next-hunk)map <leader>sp <plug>(signify-prev-hunk) nicer colorsighlight DiffAdd           cterm=bold ctermbighlight DiffDelete        cterm=bold ctermbighlight DiffChange        cterm=bold ctermbighlight SignifySignAdd    cterm=bold ctermbighlight SignifySignDelete cterm=bold ctermbighlight SignifySignChange cterm=bold ctermb Autoclose ------------------------------ Fix to let ESC work as espected with Autocl (without this, when showing an autocompleti  mode)et g:AutoClosePumvisible = {"ENTER": "\<C-Y> Yankring -------------------------------f using_neovim   let g:yankring_history_dir = '~/.config/n   " Fix for yankring and neovim problem whe   " copied in clipboard   let g:yankring_clipboard_monitor = 0lse   let g:yankring_history_dir = '~/.vim/dirsndif Airline ------------------------------et g:airline_powerline_fonts = 0et g:airline_theme = 'bubblegum'et g:airline#extensions#whitespace#enabled = Fancy Symbols!!f fancy_symbols_enabled   let g:webdevicons_enable = 1   " custom airline symbols   if !exists('g:airline_symbols')      let g:airline_symbols = {}   endif   let g:airline_left_sep = ''   let g:airline_left_alt_sep = ''   let g:airline_right_sep = ''   let g:airline_right_alt_sep = ''   let g:airline_symbols.branch = '⭠'   let g:airline_symbols.readonly = '⭤'   let g:airline_symbols.linenr = '⭡'lse   let g:webdevicons_enable = 0ndif Custom configurations ---------------- Include user's custom nvim configurationsf using_neovim   let custom_configs_path = "~/.config/nvimlse   let custom_configs_path = "~/.vim/custom.ndiff filereadable(expand(custom_configs_path)),44
"""""""lsll"""li e ei          e"i e"""""""""i e e""P"P"P"P"P""P"PP"PP"P"i e eP"P"P""P"P"P"P"P"P"P"P"P"P"P"P"P"P"P"P"""""P"Pi    e"""""c""i  e""" i                                e"ssss"s"s"i    e e"s"""s""s"c"mmimi"s"n"a""s""a"""""m"l""m"n"l"ll"h"lllll"f   ea""m""a"llll"l""n"n"n"n"n"n"n"n"n"n""lc\\\"ll""l""l"l"l"n""nn""n"l"""l"nn"hhhhhh""""l"i    e e"lll"i            e e""i e ei e,1
if using_neovim,V
Plug 'roxma/vim-hug-neovim-rpc',V
    let vim_plug_path = expand('~/.config/nvim/autoload/plug.vim'),V
else,V
let using_neovim = has('nvim')let using_vim = !using_neovim,V
colorscheme gruvbox,V
" Gruvbox,V
Plug 'gruvbox-community/gruvbox',V
